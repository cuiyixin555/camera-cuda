/*
 * INTEL CONFIDENTIAL
 *
 * Copyright (C) 2021-2023 Intel Corporation
 *
 * This software and the related documents are Intel copyrighted materials,
 * and your use of them is governed by the express license under which they
 * were provided to you ("License"). Unless the License provides otherwise,
 * you may not use, modify, copy, publish, distribute, disclose or transmit
 * this software or the related documents without Intel's prior written
 * permission. This software and the related documents are provided as is, with
 * no express or implied warranties, other than those that are expressly stated
 * in the License.
 */
/****************************************
 * Description: unit test for vector tensor
 ****************************************/
#include "clim/vt/vt_nn.h"

#include <gtest/gtest.h>

#include <vector>

using namespace vt;
using std::vector;

TEST(vttest_cm, Conv) {
  vector<int> ws{4, 1, 3, 3};
  vector<float> w;
  for (int i = 0; i < PI(ws); i++) {
    w.push_back(float(i));
  }
  vector<int> shape{4, 16, 8};
  vector<float> in;
  for (int i = 0; i < PI(shape); i++) {
    in.push_back(float(i));
  }
  auto out = Conv(in, shape, w, ws, 1, 4);
  auto gold = std::vector<float>{
      1.33000e+02, 2.05000e+02, 2.38000e+02, 2.71000e+02, 3.04000e+02,
      3.37000e+02, 3.70000e+02, 2.35000e+02, 3.27000e+02, 4.74000e+02,
      5.10000e+02, 5.46000e+02, 5.82000e+02, 6.18000e+02, 6.54000e+02,
      4.02000e+02, 5.43000e+02, 7.62000e+02, 7.98000e+02, 8.34000e+02,
      8.70000e+02, 9.06000e+02, 9.42000e+02, 5.70000e+02, 7.59000e+02,
      1.05000e+03, 1.08600e+03, 1.12200e+03, 1.15800e+03, 1.19400e+03,
      1.23000e+03, 7.38000e+02, 9.75000e+02, 1.33800e+03, 1.37400e+03,
      1.41000e+03, 1.44600e+03, 1.48200e+03, 1.51800e+03, 9.06000e+02,
      1.19100e+03, 1.62600e+03, 1.66200e+03, 1.69800e+03, 1.73400e+03,
      1.77000e+03, 1.80600e+03, 1.07400e+03, 1.40700e+03, 1.91400e+03,
      1.95000e+03, 1.98600e+03, 2.02200e+03, 2.05800e+03, 2.09400e+03,
      1.24200e+03, 1.62300e+03, 2.20200e+03, 2.23800e+03, 2.27400e+03,
      2.31000e+03, 2.34600e+03, 2.38200e+03, 1.41000e+03, 1.83900e+03,
      2.49000e+03, 2.52600e+03, 2.56200e+03, 2.59800e+03, 2.63400e+03,
      2.67000e+03, 1.57800e+03, 2.05500e+03, 2.77800e+03, 2.81400e+03,
      2.85000e+03, 2.88600e+03, 2.92200e+03, 2.95800e+03, 1.74600e+03,
      2.27100e+03, 3.06600e+03, 3.10200e+03, 3.13800e+03, 3.17400e+03,
      3.21000e+03, 3.24600e+03, 1.91400e+03, 2.48700e+03, 3.35400e+03,
      3.39000e+03, 3.42600e+03, 3.46200e+03, 3.49800e+03, 3.53400e+03,
      2.08200e+03, 2.70300e+03, 3.64200e+03, 3.67800e+03, 3.71400e+03,
      3.75000e+03, 3.78600e+03, 3.82200e+03, 2.25000e+03, 2.91900e+03,
      3.93000e+03, 3.96600e+03, 4.00200e+03, 4.03800e+03, 4.07400e+03,
      4.11000e+03, 2.41800e+03, 3.13500e+03, 4.21800e+03, 4.25400e+03,
      4.29000e+03, 4.32600e+03, 4.36200e+03, 4.39800e+03, 2.58600e+03,
      1.42300e+03, 1.79500e+03, 1.81000e+03, 1.82500e+03, 1.84000e+03,
      1.85500e+03, 1.87000e+03, 1.00500e+03, 7.97500e+03, 1.16110e+04,
      1.16980e+04, 1.17850e+04, 1.18720e+04, 1.19590e+04, 1.20460e+04,
      7.78100e+03, 1.11540e+04, 1.61790e+04, 1.62960e+04, 1.64130e+04,
      1.65300e+04, 1.66470e+04, 1.67640e+04, 1.07850e+04, 1.18020e+04,
      1.71150e+04, 1.72320e+04, 1.73490e+04, 1.74660e+04, 1.75830e+04,
      1.77000e+04, 1.13850e+04, 1.24500e+04, 1.80510e+04, 1.81680e+04,
      1.82850e+04, 1.84020e+04, 1.85190e+04, 1.86360e+04, 1.19850e+04,
      1.30980e+04, 1.89870e+04, 1.91040e+04, 1.92210e+04, 1.93380e+04,
      1.94550e+04, 1.95720e+04, 1.25850e+04, 1.37460e+04, 1.99230e+04,
      2.00400e+04, 2.01570e+04, 2.02740e+04, 2.03910e+04, 2.05080e+04,
      1.31850e+04, 1.43940e+04, 2.08590e+04, 2.09760e+04, 2.10930e+04,
      2.12100e+04, 2.13270e+04, 2.14440e+04, 1.37850e+04, 1.50420e+04,
      2.17950e+04, 2.19120e+04, 2.20290e+04, 2.21460e+04, 2.22630e+04,
      2.23800e+04, 1.43850e+04, 1.56900e+04, 2.27310e+04, 2.28480e+04,
      2.29650e+04, 2.30820e+04, 2.31990e+04, 2.33160e+04, 1.49850e+04,
      1.63380e+04, 2.36670e+04, 2.37840e+04, 2.39010e+04, 2.40180e+04,
      2.41350e+04, 2.42520e+04, 1.55850e+04, 1.69860e+04, 2.46030e+04,
      2.47200e+04, 2.48370e+04, 2.49540e+04, 2.50710e+04, 2.51880e+04,
      1.61850e+04, 1.76340e+04, 2.55390e+04, 2.56560e+04, 2.57730e+04,
      2.58900e+04, 2.60070e+04, 2.61240e+04, 1.67850e+04, 1.82820e+04,
      2.64750e+04, 2.65920e+04, 2.67090e+04, 2.68260e+04, 2.69430e+04,
      2.70600e+04, 1.73850e+04, 1.89300e+04, 2.74110e+04, 2.75280e+04,
      2.76450e+04, 2.77620e+04, 2.78790e+04, 2.79960e+04, 1.79850e+04,
      1.95780e+04, 2.83470e+04, 2.84640e+04, 2.85810e+04, 2.86980e+04,
      2.88150e+04, 2.89320e+04, 1.85850e+04, 1.17610e+04, 1.69450e+04,
      1.70140e+04, 1.70830e+04, 1.71520e+04, 1.72210e+04, 1.72900e+04,
      1.10470e+04, 2.50330e+04, 3.68410e+04, 3.69820e+04, 3.71230e+04,
      3.72640e+04, 3.74050e+04, 3.75460e+04, 2.45430e+04, 3.58050e+04,
      5.26200e+04, 5.28180e+04, 5.30160e+04, 5.32140e+04, 5.34120e+04,
      5.36100e+04, 3.49920e+04, 3.68850e+04, 5.42040e+04, 5.44020e+04,
      5.46000e+04, 5.47980e+04, 5.49960e+04, 5.51940e+04, 3.60240e+04,
      3.79650e+04, 5.57880e+04, 5.59860e+04, 5.61840e+04, 5.63820e+04,
      5.65800e+04, 5.67780e+04, 3.70560e+04, 3.90450e+04, 5.73720e+04,
      5.75700e+04, 5.77680e+04, 5.79660e+04, 5.81640e+04, 5.83620e+04,
      3.80880e+04, 4.01250e+04, 5.89560e+04, 5.91540e+04, 5.93520e+04,
      5.95500e+04, 5.97480e+04, 5.99460e+04, 3.91200e+04, 4.12050e+04,
      6.05400e+04, 6.07380e+04, 6.09360e+04, 6.11340e+04, 6.13320e+04,
      6.15300e+04, 4.01520e+04, 4.22850e+04, 6.21240e+04, 6.23220e+04,
      6.25200e+04, 6.27180e+04, 6.29160e+04, 6.31140e+04, 4.11840e+04,
      4.33650e+04, 6.37080e+04, 6.39060e+04, 6.41040e+04, 6.43020e+04,
      6.45000e+04, 6.46980e+04, 4.22160e+04, 4.44450e+04, 6.52920e+04,
      6.54900e+04, 6.56880e+04, 6.58860e+04, 6.60840e+04, 6.62820e+04,
      4.32480e+04, 4.55250e+04, 6.68760e+04, 6.70740e+04, 6.72720e+04,
      6.74700e+04, 6.76680e+04, 6.78660e+04, 4.42800e+04, 4.66050e+04,
      6.84600e+04, 6.86580e+04, 6.88560e+04, 6.90540e+04, 6.92520e+04,
      6.94500e+04, 4.53120e+04, 4.76850e+04, 7.00440e+04, 7.02420e+04,
      7.04400e+04, 7.06380e+04, 7.08360e+04, 7.10340e+04, 4.63440e+04,
      4.87650e+04, 7.16280e+04, 7.18260e+04, 7.20240e+04, 7.22220e+04,
      7.24200e+04, 7.26180e+04, 4.73760e+04, 4.98450e+04, 7.32120e+04,
      7.34100e+04, 7.36080e+04, 7.38060e+04, 7.40040e+04, 7.42020e+04,
      4.84080e+04, 3.13150e+04, 4.59190e+04, 4.60420e+04, 4.61650e+04,
      4.62880e+04, 4.64110e+04, 4.65340e+04, 3.03050e+04, 5.13070e+04,
      7.58950e+04, 7.60900e+04, 7.62850e+04, 7.64800e+04, 7.66750e+04,
      7.68700e+04, 5.05210e+04, 7.42800e+04, 1.09797e+05, 1.10076e+05,
      1.10355e+05, 1.10634e+05, 1.10913e+05, 1.11192e+05, 7.30230e+04,
      7.57920e+04, 1.12029e+05, 1.12308e+05, 1.12587e+05, 1.12866e+05,
      1.13145e+05, 1.13424e+05, 7.44870e+04, 7.73040e+04, 1.14261e+05,
      1.14540e+05, 1.14819e+05, 1.15098e+05, 1.15377e+05, 1.15656e+05,
      7.59510e+04, 7.88160e+04, 1.16493e+05, 1.16772e+05, 1.17051e+05,
      1.17330e+05, 1.17609e+05, 1.17888e+05, 7.74150e+04, 8.03280e+04,
      1.18725e+05, 1.19004e+05, 1.19283e+05, 1.19562e+05, 1.19841e+05,
      1.20120e+05, 7.88790e+04, 8.18400e+04, 1.20957e+05, 1.21236e+05,
      1.21515e+05, 1.21794e+05, 1.22073e+05, 1.22352e+05, 8.03430e+04,
      8.33520e+04, 1.23189e+05, 1.23468e+05, 1.23747e+05, 1.24026e+05,
      1.24305e+05, 1.24584e+05, 8.18070e+04, 8.48640e+04, 1.25421e+05,
      1.25700e+05, 1.25979e+05, 1.26258e+05, 1.26537e+05, 1.26816e+05,
      8.32710e+04, 8.63760e+04, 1.27653e+05, 1.27932e+05, 1.28211e+05,
      1.28490e+05, 1.28769e+05, 1.29048e+05, 8.47350e+04, 8.78880e+04,
      1.29885e+05, 1.30164e+05, 1.30443e+05, 1.30722e+05, 1.31001e+05,
      1.31280e+05, 8.61990e+04, 8.94000e+04, 1.32117e+05, 1.32396e+05,
      1.32675e+05, 1.32954e+05, 1.33233e+05, 1.33512e+05, 8.76630e+04,
      9.09120e+04, 1.34349e+05, 1.34628e+05, 1.34907e+05, 1.35186e+05,
      1.35465e+05, 1.35744e+05, 8.91270e+04, 9.24240e+04, 1.36581e+05,
      1.36860e+05, 1.37139e+05, 1.37418e+05, 1.37697e+05, 1.37976e+05,
      9.05910e+04, 9.39360e+04, 1.38813e+05, 1.39092e+05, 1.39371e+05,
      1.39650e+05, 1.39929e+05, 1.40208e+05, 9.20550e+04, 6.00850e+04,
      8.87170e+04, 8.88940e+04, 8.90710e+04, 8.92480e+04, 8.94250e+04,
      8.96020e+04, 5.87790e+04};
  for (int i = 0; i < gold.size(); i++) {
    EXPECT_NEAR(out[i], gold[i], 1e-4);
  }
}

TEST(vttest_cm, AtrousConv) {
  vector<int> ws{2, 1, 3, 3};
  vector<float> w;
  for (int i = 0; i < PI(ws); i++) {
    w.push_back(float(i));
  }
  vector<int> shape{2, 2, 2};
  vector<float> in;
  for (int i = 0; i < PI(shape); i++) {
    in.push_back(float(i));
  }
  auto out = Conv(in, shape, w, ws, 2, 2, 2);
  auto gold = std::vector<float>{0.0, 4.0, 8.0, 12.0, 52.0, 65.0, 78.0, 91.0};
  for (int i = 0; i < gold.size(); i++) {
    EXPECT_NEAR(out[i], gold[i], 1e-4);
  }
}

TEST(vttest_cm, ConvStride) {
  auto fn = [&](int oc, int ic, int ksize, int stride, int padding) {
    vector<int> ws{oc, ic, ksize, ksize};
    auto w = vt::Arange<vector<float>>(0, PI(ws));
    vector<int> as{ic, 8, 8};
    auto a = vt::Arange<vector<float>>(0, PI(as));
    auto out = Conv(a, as, w, ws, padding, 1, 1, stride);
    return out;
  };

  auto out1 = fn(1, 1, 3, 2, 0);
  EXPECT_EQ(out1.size(), 9);
  vector<float> gold1{474, 546, 618, 1050, 1122, 1194, 1626, 1698, 1770};
  for (int i = 0; i < gold1.size(); i++) {
    EXPECT_NEAR(out1[i], gold1[i], 1e-4);
  }

  auto out2 = fn(1, 4, 3, 2, 1);
  EXPECT_EQ(out2.size(), 16);
  vector<float> gold2{42976, 63952,  64864,  65776,  66270,  98340,
                      99600, 100860, 73182,  108420, 109680, 110940,
                      80094, 118500, 119760, 121020};
  for (int i = 0; i < gold2.size(); i++) {
    EXPECT_NEAR(out2[i], gold2[i], 1e-4);
  }
}

TEST(vttest_cm, ConvTranspose) {
  auto fn = [&](int oc, int ic, int ksize, int stride, int padding = 0,
                int output_padding = 0, int groups = 1, int dilation = 1) {
    vector<int> ws{ic, oc / groups, ksize, ksize};
    auto w = vt::Arange<vector<float>>(0, PI(ws));
    vector<int> as{ic, 4, 4};
    auto a = vt::Arange<vector<float>>(0, PI(as));
    auto out =
        Deconv(a, as, w, ws, stride, padding, output_padding, groups, dilation);
    return out;
  };

  auto out1 = fn(1, 1, 3, 1, 0, 0);
  EXPECT_EQ(out1.size(), 36);
  vector<float> gold1{0,  0,   1,   4,   7,   6,   0,  7,   23,  38,  41,  29,
                      12, 45,  102, 138, 126, 81,  48, 129, 246, 282, 234, 141,
                      84, 197, 341, 374, 287, 163, 72, 162, 271, 292, 217, 120};
  for (int i = 0; i < gold1.size(); i++) {
    EXPECT_NEAR(out1[i], gold1[i], 1e-4);
  }

  auto out2 = fn(1, 1, 2, 2, 0, 0);
  EXPECT_EQ(out2.size(), 64);
  vector<float> gold2{0,  0,  0,  1,  0,  2,  0,  3,  0,  0,  2,  3,  4,
                      6,  6,  9,  0,  4,  0,  5,  0,  6,  0,  7,  8,  12,
                      10, 15, 12, 18, 14, 21, 0,  8,  0,  9,  0,  10, 0,
                      11, 16, 24, 18, 27, 20, 30, 22, 33, 0,  12, 0,  13,
                      0,  14, 0,  15, 24, 36, 26, 39, 28, 42, 30, 45};
  for (int i = 0; i < gold2.size(); i++) {
    EXPECT_NEAR(out2[i], gold2[i], 1e-4);
  }

  auto out3 = fn(1, 1, 3, 1, 1, 0);
  EXPECT_EQ(out3.size(), 16);
  vector<float> gold3{7,   23,  38,  41,  45,  102, 138, 126,
                      129, 246, 282, 234, 197, 341, 374, 287};
  for (int i = 0; i < gold3.size(); i++) {
    EXPECT_NEAR(out3[i], gold3[i], 1e-4);
  }

  auto out4 = fn(1, 1, 4, 2, 1, 1);
  EXPECT_EQ(out4.size(), 81);
  vector<float> gold4{
      0,   4,   5,   14,  17,  24,  29,  18,  21,  4,   16,  26,  36,  50,
      56,  74,  44,  54,  20,  56,  66,  92,  106, 128, 146, 84,  94,  44,
      96,  122, 116, 146, 136, 170, 92,  110, 92,  200, 226, 236, 266, 272,
      306, 164, 182, 84,  176, 218, 196, 242, 216, 266, 140, 166, 164, 344,
      386, 380, 426, 416, 466, 244, 270, 108, 224, 249, 242, 269, 260, 289,
      150, 165, 156, 324, 349, 350, 377, 376, 405, 210, 225};
  for (int i = 0; i < gold4.size(); i++) {
    EXPECT_NEAR(out4[i], gold4[i], 1e-4);
  }

  auto out5 = fn(2, 2, 3, 4, 1, 1, 2, 2);
  EXPECT_EQ(out5.size(), 512);
  vector<float> gold5{
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 0,   0, 3,    0, 4,   0, 11,   0, 8,   0, 19,   0, 12,  0, 15,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 4,   0, 14,   0, 12,  0, 30,   0, 20,  0, 46,   0, 28,  0, 38,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 16,  0, 35,   0, 20,  0, 43,   0, 24,  0, 51,   0, 28,  0, 35,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 36,  0, 78,   0, 44,  0, 94,   0, 52,  0, 110,  0, 60,  0, 78,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 32,  0, 67,   0, 36,  0, 75,   0, 40,  0, 83,   0, 44,  0, 55,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 68,  0, 142,  0, 76,  0, 158,  0, 84,  0, 174,  0, 92,  0, 118,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 48,  0, 99,   0, 52,  0, 107,  0, 56,  0, 115,  0, 60,  0, 75,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 84,  0, 174,  0, 91,  0, 188,  0, 98,  0, 202,  0, 105, 0, 120,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 208, 0, 428,  0, 221, 0, 454,  0, 234, 0, 480,  0, 247, 0, 266,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 456, 0, 936,  0, 482, 0, 988,  0, 508, 0, 1040, 0, 534, 0, 576,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 260, 0, 532,  0, 273, 0, 558,  0, 286, 0, 584,  0, 299, 0, 322,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 560, 0, 1144, 0, 586, 0, 1196, 0, 612, 0, 1248, 0, 638, 0, 688,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 312, 0, 636,  0, 325, 0, 662,  0, 338, 0, 688,  0, 351, 0, 378,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 664, 0, 1352, 0, 690, 0, 1404, 0, 716, 0, 1456, 0, 742, 0, 800,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 364, 0, 740,  0, 377, 0, 766,  0, 390, 0, 792,  0, 403, 0, 434,
      0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,    0, 0,   0, 0,
      0, 448, 0, 911,  0, 464, 0, 943,  0, 480, 0, 975,  0, 496, 0, 527};
  for (int i = 0; i < gold5.size(); i++) {
    EXPECT_NEAR(out5[i], gold5[i], 1e-4);
  }
}

TEST(vttest_cm, AvgPool) {
  vector<float> a{1, 2, 3, 4, 5, 6, 7, 8};
  vector<int> shape{1, 2, 4, 1};
  auto b = AvgPool(a, shape, 2);
  EXPECT_FLOAT_EQ(b[0], 3.5f);
  EXPECT_FLOAT_EQ(b[1], 5.5f);
}

TEST(vttest_cm, BroadcastAdd) {
  vector<float> a = vt::Arange<vector<float>>(1, 5);
  auto b = BroadcastAdd(a, vector<int>{2, 2}, {1}, {});
  for (int i = 0; i < b.size(); i++) {
    EXPECT_EQ(b[i], a[i] + 1);
  }
  b = BroadcastAdd(a, vector<int>{2, 2}, {1, 2}, {2});
  for (int i = 0; i < b.size(); i++) {
    EXPECT_EQ(b[i], (vector<float>{2, 3, 5, 6})[i]);
  }
  b = BroadcastAdd(a, vector<int>{2, 2}, {1, 2, 3, 4}, {2, 2});
  for (int i = 0; i < b.size(); i++) {
    EXPECT_EQ(b[i], (vector<float>{2, 4, 6, 8})[i]);
  }
  a = vt::Arange<vector<float>>(0, 2 * 3 * 4 * 5);
  b = std::vector<float>{1, 2, 3, 4, 5, 6};
  auto c = BroadcastAdd(a, vector<int>{2, 3, 4, 5}, b, {2, 3});
  for (int i = 0; i < 6; i++) {
    auto x = SliceAny(c, vector<int>{6, 4, 5}, {i, -1, -1});
    auto y = SliceAny(a, vector<int>{6, 4, 5}, {i, -1, -1});
    for (int j = 0; j < x.size(); j++) {
      EXPECT_EQ(x[j], y[j] + b[i]);
    }
  }
}
